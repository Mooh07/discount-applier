{% comment %} Not a necessary part, The method is useful to format money and update dom with new values if needed {% endcomment %}
<script>
    var Shopify = Shopify || {};
    Shopify.money_format = "{{ shop.money_format }}";
    Shopify.formatMoney = function(cents, format) {
    if (typeof cents == 'string') { cents = cents.replace('.',''); }
    var value = '';
    var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
    var formatString = (format || this.money_format);

    function defaultOption(opt, def) {
       return (typeof opt == 'undefined' ? def : opt);
    }

    function formatWithDelimiters(number, precision, thousands, decimal) {
      precision = defaultOption(precision, 2);
      thousands = defaultOption(thousands, ',');
      decimal   = defaultOption(decimal, '.');

      if (isNaN(number) || number == null) { return 0; }

      number = (number/100.0).toFixed(precision);

      var parts   = number.split('.'),
          dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
          cents   = parts[1] ? (decimal + parts[1]) : '';

      return dollars + cents;
    }

    switch(formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }

    return formatString.replace(placeholderRegex, value);
  };
</script>
<style>
  .discount-applier__success{
    display: none
  }
  .discount-applier__success.visible{
    display: block
  }
  discount-applier input.error{
    border-color:red;
  }
</style>

{% assign valid_discounts = "" %}
{% for item in cart.items  %}
  {% for discount in item.line_level_discount_allocations %}
    {% unless discount.discount_application.type == "discount_code" %}
      {% continue %}
    {% endunless %}
    {% if valid_discounts.size > 0 %}
      {% assign valid_discounts = valid_discounts | append: "," %}
    {% endif %}
    {% assign valid_discounts = valid_discounts | append: discount.discount_application.title %}
  {% endfor %}
{% endfor %}

{% comment %} 
  Please don't forget to make the content translateable through translating json files or through a section settings :)
{% endcomment %}

<discount-applier data-applieddiscounts="{{ valid_discounts }}">
  <div>
    <input type="text">
    <button type="button" data-apply="Apply" data-applying="...">Apply</button>
  </div>
  <div class="discount-applier__success">Coupon applied succesfully</div>
</discount-applier>
<script>
  class DiscountApplier extends HTMLElement {
    constructor() {
      super();
      this.alreadyAppliedDiscounts = this.dataset.applieddiscounts 
      this.input = this.querySelector("input");
      this.applyButton = this.querySelector("button");
      this.successText = this.querySelector(".discount-applier__success")
      this.applyButton.addEventListener("click",this.applyDiscount.bind(this))
    }
    async applyDiscount(){
      this.successText.classList.remove("visible");
      if(this.input.value <= 0) {this.input.classList.add("error");return}
      this.input.classList.remove("error")
      this.applyButton.innerText = this.applyButton.dataset.applying;
      // Basically join get the already applied discounts, get the new added discounts and join with comma
      // "," joining allow for them to be all applied 
      let discounts = null;
      if(this.alreadyAppliedDiscounts) discounts = Array.from(new Set([...this.alreadyAppliedDiscounts.split(","),this.input.value])).join(",");
      else discounts = this.input.value

      try {
        const applyDiscount = await fetch(`/checkout?discount=${discounts}`);
        if(!applyDiscount.ok){
          throw new Error('Discount couldn\'t be applied');
          return;
        }
        let cart = await this.getCart();
        if(this.verifyIfValidDiscount(cart)) {
          this.successText.classList.add("visible");
          this.alreadyAppliedDiscounts = discounts
        }
        this.updateDomPrice(cart)
      } catch (error) {
        console.log(error)
      } 
      this.applyButton.innerText = this.applyButton.dataset.apply;
      }
      updateDomPrice(cart){
        // Replace with your own selectors
        this.parentElement.querySelector(".cart-subtotal__price").innerText = Shopify.formatMoney(cart.total_price)

      }
     async getCart(){
        const getCartResponse = await fetch("{{routes.cart_url}}.json");
        const cart = await getCartResponse.json()
        return cart
     }
      verifyIfValidDiscount(cart){
        let discountApplied = false;
          cart.items.forEach(item => {
            item.discounts.forEach(discount=>{
              if(discount.title === this.input.value) discountApplied = true;
            })
          });
        return discountApplied
      }
      }
    customElements.define('discount-applier', DiscountApplier);
</script>
